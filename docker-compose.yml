version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: shopping_monitor_postgres
    environment:
      POSTGRES_DB: shopping_monitor
      POSTGRES_USER: shopping_user
      POSTGRES_PASSWORD: shopping_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shopping_user -d shopping_monitor"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopping_monitor_network

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: shopping_monitor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopping_monitor_network

  # Application FastAPI (optionnel pour le développement)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shopping_monitor_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://shopping_user:shopping_password@postgres:5432/shopping_monitor
      - DATABASE_URL_SYNC=postgresql://shopping_user:shopping_password@postgres:5432/shopping_monitor
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=True
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shopping_monitor_network
    profiles:
      - full  # Utiliser `docker-compose --profile full up` pour inclure l'API

  # pgAdmin pour la gestion de la base de données (optionnel)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shopping_monitor_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@shoppingmonitor.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - shopping_monitor_network
    profiles:
      - tools  # Utiliser `docker-compose --profile tools up` pour inclure pgAdmin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  shopping_monitor_network:
    driver: bridge 